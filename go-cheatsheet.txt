Links:
https://pkg.go.dev/                 -- find go packages
https://go.dev/doc/effective_go     -- best practices

Terminal Commands:

$ go mod init example.com/hello   -- creates a new go module. (go.mod file)

$ go run fileName.go  -- compile and run (deletes executable)
$ go build fileName.go -- compile and run (leaves executable)

$ go mod tidy -- ensures go.mod and go.sum are clean and accurate 
NOTE: Remember to run this command whenever you add, remove, or change your code's dependencies.


Operators:
In Go, the := operator is a shortcut for declaring and initializing a variable in one line (Go uses the value on the right to determine the variable's type).


Language Trivia:

Go code is grouped into packages, and packages are grouped into modules.

In Go, a function whose name starts with a capital letter can be called by a function not in the same package. 
This is known in Go as an exported name.

nil means no error 

a slice in Go is a dynamically sized array. 

Testing Info:
-ending a file using _test.go tells the go test command that this file contains test functions.
-Test function names have the form TestName, where Name says something about the specific test.
-test functions take a pointer to the testing package's testing.T type. 
 You use this parameter's methods for reporting and logging from your test
  ==> func TestHelloName(t *testing.T) {} 

  - go test -v  ==>  You can add the -v flag to get verbose output that lists all of the tests and their results